options {
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)

public class Parser {

}
PARSER_END(Parser)

// Lexer
TOKEN : {
    "+" | "-" | "*" | "/" | "%" | "++" | "--" | "&&" | "||" | "|" | "!" | "^"| "=" | "," | "."
    | "[" | "]" | "[]" | "[[" | "]]" | "(" | ")" | "<" | ">" | "{" | "}" | ";" | "$" | ":"
    | "if" | "else" | "while" | "return"
    | <Type : "String" | "Range" | "State" | "Transition" | "FA" | "RA" |"int" | "double" | "char" | "boolean">
    | "Set" | "Map"
    | <BoolLiteral : "true" | "false">
    | <CharLiteral : "'" ["A"-"Z", "a"-"z", "?", "!"] "'">
    | <StringLiteral : "\"" ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0"-"9"])* "\"">
    | <IntegerLiteral : "0" | (["1"-"9"] (["0"-"9"])*)>
    | <RegexLiteral : "/" (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "(" | ")" | "[" | "]" | "+" | "*" | "|" | "?" | "-")+ "/">
    | <Identifier : ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0" - "9"])*>
    | <Arrow : "- - >" | "-- >" | "- ->" | "-->">
}

SKIP :
{
    // White space
    " "
    | "\t"
    | "\n"
    | "\r"
    // Single Line Comment
    | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    // Multi Line Comment
    | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// Parser

// CU -> (decl | stmnt)*
CuNode cu(): {
	CuNode node = new CuNode();
	Node declOrStmnt;
  } {
    ((declOrStmnt=decl() | declOrStmnt=stmnt()) { node.declOrStmntList.add(declOrStmnt); })*
    { return node; }
}

// decl -> type() <Identifier> (varDecl | methDecl | ";")
DeclNode decl(): {
	Token identifier;
	TypeNode type;
	DeclNode node = null;
} {
    type = type() identifier=<Identifier> (node = varDecl(type, identifier) | node = methDecl(type, identifier) | ";")
    { return node == null ? new DeclNode(type, identifier) : node; }
}

// varDecl -> "=" expr ";"
VarDeclNode varDecl(TypeNode type, Token identifier): {
	ExprNode expr;
  } {
    "=" expr = expr() ";"
    {  return new VarDeclNode(type, identifier, expr); }
}

// methDecl -> "(" (type <Identifier> ("," type <Identifier>)*)? ")" stmnt
MethDeclNode methDecl(TypeNode type, Token identifier): {
	MethDeclNode node = new MethDeclNode(type, identifier);
	TypeNode firstType, lastType;
	Token firstIdentifier, lastIdentifier;
	int countIndex = 1;
  } {
    "(" (firstType = type() firstIdentifier = <Identifier> ("," lastType = type() lastIdentifier = <Identifier>
    { node.params.put(lastIdentifier,new ParamWrapper(countIndex++,lastType,lastIdentifier));})*
    { node.params.put(firstIdentifier, new ParamWrapper(0,firstType,firstIdentifier));})? ")" stmnt()
    { return node; }
}

// stmnt -> returnStmnt | ifStmnt | whileStmnt | blockStmnt | expr | ";"
StmntNode stmnt(): {
	StmntNode node = null;
  } {
    (node = returnStmnt() | node = ifStmnt() | node = whileStmnt() | LOOKAHEAD(3) node = blockStmnt() | node = expr() | ";")
	{ return node; }
}

// returnStmnt -> "return" expr ";"
ReturnStmntNode returnStmnt(): {
	ExprNode expr;
  } {
    "return" expr = expr() ";"
    { return new ReturnStmntNode(expr); }      
}

// ifStmnt -> "if" "(" expr ")" stmnt ("else" stmnt)?
IfNode ifStmnt(): {
	StmntNode ifExpr, ifStmnt, elseStmnt = null;
  } {
    "if" "("  ifExpr = expr() ")" ifStmnt = stmnt() (LOOKAHEAD(1)"else" elseStmnt=stmnt())?
    { return new IfNode(ifExpr,ifStmnt,elseStmnt); }
}

// whileStmnt -> "while" "(" expr ")" stmnt
WhileNode whileStmnt(): {
	StmntNode whileExpr, whileStmnt;
  } {
    "while" "(" whileExpr=expr() ")" whileStmnt=stmnt()
    { return new WhileNode(whileExpr,whileStmnt); } 
}

// blockStmnt -> "{" (decl | stmnt)* "}"
BlockStmntNode blockStmnt(): {
	BlockStmntNode node = new BlockStmntNode();
	Node declOrStmnt;
  } {
    "{" ((declOrStmnt = decl() | declOrStmnt = stmnt()) { node.declOrStmntList.add(declOrStmnt); })* "}"
    { return node; }
}

// type -> arrayType | <Type> | setType | mapType
TypeNode type(): {
	TypeNode node = null;
	Token type = null;
  } {
    (LOOKAHEAD(2) node=arrayType() | type=<Type> | node=setType() | node=mapType())
    {
        if(type == null) {
            return node;
        } else {
            return new TypeNode(VariableType.of(type.image));
        }
    }
}

// setType -> "Set" "<" <Type> ">"
SetTypeNode setType(): {
    Token type;
  } {
    "Set" "<" type=<Type> ">"
    { return new SetTypeNode(VariableType.of(type.image));}
}

// mapType -> "Map" "<" <Type> , <Type> ">"
MapTypeNode mapType(): {
	Token key,value;
  } {
    "Map" "<" key=<Type> "," value=<Type> ">"
    { return new MapTypeNode(VariableType.of(key.image),VariableType.of(value.image)); }
}

// arrayType -> <Type> "[]"

ArrayTypeNode arrayType(): {
    Token type;
  } {
    type = <Type> "[]"
    { return new ArrayTypeNode(VariableType.of(type.image));}
}

// atom -> "!" atom | <Character> | <String> | <Integer> | <Boolean>
//         | set | map | array
//         | range | fa
//         | (<Identifier> ".")? methCall
//         | (state | <Identifier> ("." <Identifier>)*) (transition)?
AtomNode atom(): {
	Token token = null;
	Token attribute;
	AtomNode atom;
	MethCallNode methCall;
	StateLitNode state = null;
	TransitionLitNode transition = null;
  } {
    "!" atom = atom() { return new NegationNode(atom); }
    | token = <CharLiteral> { return new LitNode(token); }
    | token = <StringLiteral> { return new LitNode(token); }
    | token = <IntegerLiteral> { return new LitNode(token); }
    | token = <BoolLiteral> { return new LitNode(token); }
    | atom = set() { return atom; }
    | LOOKAHEAD(3) atom = map() { return atom; }
    | atom = array() { return atom; }
    | atom = range() { return atom; }
    | atom = fa() { return atom; }
    | LOOKAHEAD(4) (LOOKAHEAD(2) token = <Identifier> ".")? methCall = methCall() { return new ClassMethCallNode(token, methCall); }
    | LOOKAHEAD(2) token = <Identifier> "." attribute = <Identifier> { return new ReadClassAttributeNode(token, attribute); }
    | (state = state() | token = <Identifier>) (LOOKAHEAD(3) transition = transition())? {
        if (transition == null) {
            if (token == null) {
                return state;
            } else {
                return new IdentifierNode(token);
            }
        } else {
            return new TransitionLitWithStartNode(token, state, transition);
        }
    }
}

// set -> "{" (atom ("," atom)*)? "}"
SetLitNode set(): {
  	SetLitNode node = new SetLitNode();
	AtomNode first, last;
  } {
    "{" (first = atom() ("," last = atom() { node.elementList.add(last); } )* { node.elementList.add(first); })? "}"
    { return node; }
}

// map -> "[[" (atom ":" atom ("," atom ":" atom)*)? "]]"
MapLitNode map(): {
	MapLitNode node = new MapLitNode();
	AtomNode firstKey, firstValue, lastKey, lastValue;
} {
    "[[" (firstKey = atom() ":" firstValue = atom() ("," lastKey = atom() ":" lastValue = atom() { node.elements.put(lastKey, lastValue);} )* { node.elements.put(firstKey, firstValue); })? "]]"
    {  return node; }
}

// array -> "[[" (atom ("," atom)*)? "]]"
ArrayLitNode array(): {
	ArrayLitNode node = new ArrayLitNode();
	AtomNode first, last;
} {
    "[[" (first=atom() ("," last = atom() { node.elementList.add(last); } )* { node.elementList.add(0, first); })? "]]"
     { return node; }
}

// methCall -> <Identifier> "(" (atom ("," atom)*)? ")"
MethCallNode methCall(): {
  	MethCallNode node = new MethCallNode();
	Token identifier;
	AtomNode first, last;
} {
    identifier = <Identifier> "(" ( first = atom() ("," last = atom() { node.elementList.add(last); })*{ node.elementList.add(0, first); })? ")"
    { node.identifier = identifier; return node; }
}

// range -> "[" <Char> ("-" <Char)? ("," <Char> ("-" <Char)?)* "]" ("+" (range | <Identifier>))*
RangeLitNode range(): {
    RangeLitNode node = new RangeLitNode();
    RangeLitNode additionRange = null;
    Token additionIdentifier = null;
    Token a;
    Token b = null;
} {
    "[" a = <CharLiteral> ("-" b = <CharLiteral>)? { node.add(a, b); b=null; } ("," a = <CharLiteral> ("-" b = <CharLiteral> )? { node.add(a, b); b=null; })* "]"
    (LOOKAHEAD(2) "+" (additionRange = range() | additionIdentifier = <Identifier>) {
        if(additionRange == null)
            node.add(additionIdentifier);
        else
            node.add(additionRange);
        additionRange = null;
        additionIdentifier = null;
        })*
    { return node; }
}

// state -> "$" <String> ("^" (<Integer> | <Identifier>))?
StateLitNode state(): {
	Token label, accept = null;
  } {
    "$" label = <StringLiteral> (LOOKAHEAD(2) "^" (accept = <IntegerLiteral> | accept = <Identifier>))?
    { return new StateLitNode(label,accept); }
}

// transition -> (("-" "-" | "--") (range | <Identifier>) | "-") <Arrow> (state | <Identifier>)
TransitionLitNode transition(): {
	Token rangeIdentifier = null;
	Token stateIdentifier = null;
	RangeLitNode range = null;
	StateLitNode state = null;
  } {
    (LOOKAHEAD(2) ( "-" "-" | "--") (range = range() | rangeIdentifier = <Identifier>) | "-") <Arrow> ( state = state() | stateIdentifier = <Identifier>)
    { return new TransitionLitNode(rangeIdentifier, stateIdentifier, range, state); }
}

// fa -> "<" (state | <Identifier>) ",{" (<Identifier> (transition)? ("," <Identifier (transition)?)*)? "}" ">"
FaLitNode fa(): {
    FaLitNode node = new FaLitNode(null, null);
    StateLitNode state = null;
    TransitionLitNode transition = null;
    Token identifier = null;
    FaLitNode additionalFa = null;
 } {
    "<" (state = state() | identifier = <Identifier>) {
        if(state == null)
            node.startStateIdentifier = identifier;
        else
            node.startState = state;
            }
     "," "{" (identifier = <Identifier>(transition = transition())? { node.add(identifier, transition); transition = null; }
     ("," identifier = <Identifier>(transition = transition())? { node.add(identifier, transition); transition = null; } )*)? "}" ">"
    (LOOKAHEAD(2) "+" (additionalFa = fa() | identifier = <Identifier>) {
        if(additionalFa == null)
            node.add(identifier);
        else
            node.add(additionalFa);
        additionalFa = null;
        identifier = null;
         })*
    { return node; }
}

// expr -> "(" expr ")" | compExpr (("&&" | "||") compExpr)?
ExprNode expr(): {
    ExprNode node;
    CompExprNode a;
    CompExprNode b = null;
    Token op = null;
} {
    "(" node = expr() ")" { return new BracketExpr(node); }
    | a = compExpr() ((op = "&&" | op = "||") b = compExpr())? { return new AndOrExpr(a, op, b); }
}

// compExpr -> sumExpr (("=="|"!="|"<="|">="|"<"|">") sumExpr)?
CompExprNode compExpr(): {
    SumExprNode a;
    SumExprNode b = null;
    Token op = null;
 } {
    a = sumExpr() (LOOKAHEAD(2)(op="==" | op="!=" | op="<=" | op=">=" | op="<" | op=">") b = sumExpr())?
    { return new CompExprNode(a, op, b); }
}

// sumExpr -> prodExpr (("+" | "-") prodExpr)?
SumExprNode sumExpr(): {
    ProdExprNode a;
    ProdExprNode b = null;
    Token op = null;
 } {
    a = prodExpr() ((op="+" | op="-") b = prodExpr())?
    { return new SumExprNode(a, op, b); }
}

// prodExpr -> intersectionExpr (("*" | "/") intersectionExpr)?
ProdExprNode prodExpr(): {
    IntersectionExprNode a;
    IntersectionExprNode b = null;
    Token op = null;
 } {
    a = intersectionExpr() ((op="*" | op="/") b = intersectionExpr())?
    { return new ProdExprNode(a, op, b); }
}

// intersectionExpr -> preOrPostIncrementExpr ("^" preOrPostIncrementExpr)?
IntersectionExprNode intersectionExpr(): {
    PreOrPostIncrementExprNode a;
    PreOrPostIncrementExprNode b = null;
 } {
    a = preOrPostIncrementExpr() ("^" b = preOrPostIncrementExpr())?
    {  return new IntersectionExprNode(a, b); }
}

// preOrPostIncrementExpr -> ("++" | "--") atom | atom ("++" | "--")?
PreOrPostIncrementExprNode preOrPostIncrementExpr(): {
    AtomNode atom;
    Token op = null;
 } {
    LOOKAHEAD(2) (op="++" | op="--") atom = atom() { return new PreOrPostIncrementExprNode(atom, op, null); }
    | LOOKAHEAD(2) atom = atom() (op="++" | op="--")? { return new PreOrPostIncrementExprNode(atom, null, op); }
}
