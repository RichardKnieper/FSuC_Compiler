options {
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)

public class Parser {

}
PARSER_END(Parser)

// Lexer
TOKEN : {
    "+" | "-" | "*" | "/" | "%" | "++" | "--" | "&&" | "||" | "|" | "!" | "^"| "=" | "," | "."
    | "[" | "]" | "[]" | "[[" | "]]" | "(" | ")" | "<" | ">" | "{" | "}" | ";" | "$" | ":"
    | "if" | "else" | "while" | "return"
    | <Type : "String" | "Range" | "State" | "Transition" | "FA" | "RA" |"int" | "double" | "char" | "boolean">
    | "Set" | "Map"
    | <BoolLiteral : "true" | "false">
    | <CharLiteral : "'" ["A"-"Z", "a"-"z", "?", "!"] "'">
    | <StringLiteral : "\"" ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0"-"9"])* "\"">
    | <IntegerLiteral : "0" | (["1"-"9"] (["0"-"9"])*)>
    | <RegexLiteral : "/" (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "(" | ")" | "[" | "]" | "+" | "*" | "|" | "?" | "-")+ "/">
    | <Identifier : ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0" - "9"])*>
    | <Arrow : "- - >" | "-- >" | "- ->" | "-->">
}

SKIP :
{
    // White space
    " "
    | "\t"
    | "\n"
    | "\r"
    // Single Line Comment
    | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    // Multi Line Comment
    | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// Parser

// CU -> (decl | stmnt)*
void cu(): {} {
    (decl() | stmnt())*
}

// decl -> type() <Identifier> (varDecl | methDecl | ";")
void decl(): {} {
    type() <Identifier> (varDecl() | methDecl() | ";")
}

// varDecl -> "=" expr ";"
void varDecl(): {} {
    "=" expr() ";"
}

// methDecl -> "(" (type <Identifier> ("," type <Identifier>)*)? ")" stmnt
void methDecl(): {} {
    "(" (type() <Identifier> ("," type() <Identifier>)*)? ")" stmnt()
}

// stmnt -> (<Identifier> ".")? methCall "";" | returnStmnt | ifStmnt | whileStmnt | blockStmnt | expr | ";"
void stmnt(): {} {
    LOOKAHEAD(4) (LOOKAHEAD(2) <Identifier> ".")? methCall() ";"
    | returnStmnt() | ifStmnt() | whileStmnt() | LOOKAHEAD(3) blockStmnt() | expr() | ";"
}

// returnStmnt -> "return" expr ";"
void returnStmnt(): {} {
    "return" expr() ";"
}

// ifStmnt -> "if" "(" expr ")" stmnt ("else" stmnt)?
void ifStmnt(): {} {
    "if" "("  expr() ")" stmnt() (LOOKAHEAD(1)"else" stmnt())?
}

// whileStmnt -> "while" "(" expr ")" stmnt
void whileStmnt(): {} {
    "while" "(" expr() ")" stmnt()
}

// blockStmnt -> "{" (decl | stmnt)* "}"
void blockStmnt(): {} {
    "{" (decl() | stmnt())* "}"
}

/*
 */
// type -> arrayType | <Type> | setType | mapType
void type(): {} {
    LOOKAHEAD(2) arrayType() | <Type> | setType() | mapType()
}

// setType -> "Set" "<" <Type> ">"
void setType(): {} {
    "Set" "<" <Type> ">"
}

// mapType -> "Map" "<" <Type> , <Type> ">"
void mapType(): {} {
    "Map" "<" <Type> "," <Type> ">"
}

// arrayType -> <Type> "[]"
void arrayType(): {} {
    <Type> "[]"
}

// atom -> "!" atom | <Character> | <String> | <Integer> | <Boolean>
//         | set | map | array
//         | range | fa
//         | (<Identifier> ".")? methCall
//         | (state | <Identifier> ("." <Identifier>)*) (transition)?
void atom(): {} {
    "!" atom() | <CharLiteral> | <StringLiteral> | <IntegerLiteral> | <BoolLiteral>
    | set() | LOOKAHEAD(3) map() | array()
    | range() | fa()
    | LOOKAHEAD(4) (LOOKAHEAD(2) <Identifier> ".")? methCall()
    | (state() | <Identifier> ("." <Identifier>)*) (LOOKAHEAD(3) transition())?
}

// set -> "{" (atom ("," atom)*)? "}"
void set(): {} {
    "{" (atom() ("," atom())*)? "}"
}

// map -> "[[" (atom ":" atom ("," atom ":" atom)*)? "]]"
void map(): {} {
    "[[" (atom() ":" atom() ("," atom() ":" atom())*)? "]]"
}

// array -> "[[" (atom ("," atom)*)? "]]"
void array(): {} {
    "[[" (atom() ("," atom())*)? "]]"
}

// methCall -> <Identifier> "(" (atom ("," atom)*)? ")"
void methCall(): {} {
    <Identifier> "(" (atom() ("," atom())*)? ")"
}

// range -> "[" <Char> ("-" <Char)? ("," <Char> ("-" <Char)?)* "]" ("+" (range | <Identifier>))*
void range(): {} {
    "[" <CharLiteral> ("-" <CharLiteral>)? ("," <CharLiteral> ("-" <CharLiteral> )?)* "]"
    (LOOKAHEAD(2) "+" (range() | <Identifier>))*
}

// state -> "$" <String> ("^" (<Integer> | <Identifier>))?
void state(): {} {
    "$" <StringLiteral> (LOOKAHEAD(2) "^" (<IntegerLiteral> | <Identifier>))?
}

// transition -> (("-" "-" | "--") (range | <Identifier>) | "-") <Arrow> (state | <Identifier>)
void transition(): {} {
    (LOOKAHEAD(2) ( "-" "-" | "--") (range() | <Identifier>) | "-") <Arrow> (state() | <Identifier>)
}

// fa -> "<" (state | <Identifier>) ",{" (<Identifier> (transition)? ("," <Identifier (transition)?)?)? "}" ">"
void fa(): {} {
    "<" (state() | <Identifier>) "," "{" (<Identifier>(transition())? ("," <Identifier>(transition())?)?)? "}" ">"
    (LOOKAHEAD(2) "+" (fa() | <Identifier>))*
}

// expr -> "(" expr ")" | compExpr (("&&" | "||") compExpr)*
void expr(): {} {
    ("(" expr() ")") | (compExpr() (("&&" | "||") compExpr())*)
}

// compExpr -> sumExpr (("=="|"!="|"<="|">="|"<"|">") sumExpr)*
void compExpr(): {} {
    sumExpr() (LOOKAHEAD(2)("=="|"!="|"<="|">="|"<"|">") sumExpr())*
}

// sumExpr -> prodExpr (("+" | "-") prodExpr)*
void sumExpr(): {} {
    prodExpr() (("+"|"-") prodExpr())*
}

// prodExpr -> intersectionExpr (("*" | "/") intersectionExpr)*
void prodExpr(): {} {
    intersectionExpr() (("*"|"/") intersectionExpr())*
}

// intersectionExpr -> preOrPostIncrementExpr ("^" preOrPostIncrementExpr)*
void intersectionExpr(): {} {
    preOrPostIncrementExpr() ("^" preOrPostIncrementExpr())*
}

// preOrPostIncrementExpr -> ("++" | "--") atom | atom ("++" | "--")?
void preOrPostIncrementExpr(): {} {
    LOOKAHEAD(2) ("++" | "--") atom()
    | LOOKAHEAD(2) atom() ("++" | "--")?
}
