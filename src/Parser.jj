options {
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)

public class Parser {

}
PARSER_END(Parser)

// Lexer
TOKEN : {
    "+" | "-" | "*" | "/" | "%" | "&&" | "|" | "!" | "^"| "=" | "," | "."
    | "[" | "]" | "(" | ")" | "<" | ">" | "{" | "}" | ";" | "$"
    | "true" | "false" | "if" | "else" | "while" | "return"
    | <Type : "Range" | "State" | "Transition" | "FA" | "RA" |"int" | "double" | "char" | "boolean">
    | "Set" | "Map"
    | <Identifier : ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0" - "9"])*>
    | <CharLiteral : "'" ["A"-"Z", "a"-"z", "?", "!"] "'">
    | <StringLiteral : "\"" ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0"-"9"])* "\"">
    | <IntegerLiteral : "0" | (["1"-"9"] (["0"-"9"])*)>
    | <DoubleLiteral : <IntegerLiteral> "." (["0"-"9"])* | "." (["0"-"9"])+>
    | <RegexLiteral : "/" (<StringLiteral> | <CharLiteral> | "(" | ")" | "[" | "]" | "+" | "*" | "|")+ "/" >
}

SKIP : {
    <WS: [" ","\n","\r","\t"]>
    | <Comment: "//" (~["\n"])*>
}

// Parser

// CU -> (decl | stmnt)*
void cu(): {} {
    (LOOKAHEAD(20) decl() | LOOKAHEAD(20) stmnt())*
}

void decl(): {} {
    <Type> <Identifier>  (
        (("=" (atom() | expr()))? ";") // variable
        | ("(" (<Type> <Identifier>)* ")" blockStmnt()) // method
    )
}

void stmnt(): {} {
    // if, while, block, audruck
    returnStmnt() | blockStmnt() | ";"
}

void blockStmnt(): {} {
    "{" (decl() | stmnt())* "}"
}

void returnStmnt(): {} {
    "return" (atom() | expr()) ";"
}

void expr(): {} {
    ";" // TODO
}

void plusExpr(): {} {
    atom() "+" atom()
}

void atom(): {} {
    <Identifier> | <CharLiteral> | <StringLiteral> | <IntegerLiteral> | <DoubleLiteral> | <RegexLiteral>
    | range() | state() | transition() | fa()
}

void range(): {} {
    "[" <CharLiteral> ("-" <CharLiteral>)? ( "," <CharLiteral> ("-" <CharLiteral>)? )* "]"
}

void state(): {} {
    "$" <StringLiteral> ("^" (<IntegerLiteral> | <Identifier>) )?
}

void transition(): {} {
    ( ("--"  ( range() | <Identifier> ) ) | "-") "-->" state()
}

void fa(): {} {
    "<" ( state() | <Identifier> ) "," "{" ( (<Identifier> | state()) (<Identifier> | transition()) )* "}" ">"
}
