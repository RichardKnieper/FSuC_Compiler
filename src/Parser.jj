options {
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)

public class Parser {

}
PARSER_END(Parser)

// Lexer
TOKEN : {
    "+" | "-" | "*" | "/" | "%" | "&&" | "|" | "!" | "^"| "=" | "," | "."
    | "[" | "]" | "[]" | "(" | ")" | "<" | ">" | "{" | "}" | ";" | "$"
    | "if" | "else" | "while" | "return"
    | <Type : "Range" | "State" | "Transition" | "FA" | "RA" |"int" | "double" | "char" | "boolean">
    | "Set" | "Map"
    | <BoolLiteral : "true" | "false">
    | <BoolOp : ">=" | "<=" | "==" | "!=">
    | <Identifier : ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0" - "9"])*>
    | <CharLiteral : "'" ["A"-"Z", "a"-"z", "?", "!"] "'">
    | <StringLiteral : "\"" ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0"-"9"])* "\"">
    | <IntegerLiteral : "0" | (["1"-"9"] (["0"-"9"])*)>
    | <DoubleLiteral : <IntegerLiteral> "." (["0"-"9"])* | "." (["0"-"9"])+>
    | <RegexLiteral : "/" (<StringLiteral> | <CharLiteral> | "(" | ")" | "[" | "]" | "+" | "*" | "|")+ "/" >
}

SKIP : {
    <WS: [" ","\n","\r","\t"]>
    | <Comment: "//" (~["\n", "\r"])*>
}

// Parser

// CU -> (decl | stmnt)*
void cu(): {} {
    (decl() | stmnt())*
}

// decl -> (Type "[]"? | set | map) Identifier (varDecl | methDecl) ";"
void decl(): {} {
    (<Type> ("[]")? | set() | map()) <Identifier> (varDecl() | methDecl()) ";"
}

// varDecl ->  "=" expr
void varDecl(): {} {
    "=" expr() ";"
}

// set -> "Set<" (Type "[]"? | set | map)+ ">"
void set(): {} {
    "Set<" (<Type> ("[]")? | set() | map())+ ">"
}

// map -> "Map<" (Type "[]"? | set | map)+ , (Type "[]"? | set | map)+ ">"
void map(): {} {
    "Map<" (<Type> ("[]")? | set() | map())+ "," (<Type> ("[]")? | set() | map())+ ">"
}

// expr -> range | (state transition?) | fa | atom | bool | calc | TODO
void expr(): {} {
    range() | ( state() (transition())? ) | LOOKAHEAD(2) fa() | LOOKAHEAD(2) atom() | LOOKAHEAD(2) bool() | LOOKAHEAD(2) calc()
}

// range -> "[" ( CharLiteral ("-" CharLiteral)? ) ("," ( CharLiteral ("-" CharLiteral)? )* "]"
void range(): {} {
    "[" <CharLiteral> ("-" <CharLiteral>)? ( "," <CharLiteral> ("-" <CharLiteral>)? )* "]"
}

// state -> "$" StringLiteral ("^" IntegerLiteral)?
void state(): {} {
    "$" <StringLiteral> ("^" ( <IntegerLiteral> | <Identifier> ) )?
}

// transition -> (("--" (range | Identifier)) | "-") "-->" state
void transition(): {} {
    ( ("--"  ( range() | <Identifier> ) ) | "-") "-->" state()
}

// fa -> "<" (state | Identifier) ",{" ((Identifier | state) (Identifier | transition))* "}>"
void fa(): {} {
    "<" ( state() | <Identifier> ) "," "{" ( (<Identifier> | state()) (<Identifier> | transition()) )* "}" ">"
}

// methDecl -> "(" (Type Identifier)* ")" block
void methDecl(): {} {
    "(" (<Type> <Identifier>)* ")" block()
}

// methCall -> Identifier ("." Identifier)? "(" ( atom ("," atom)* )? ")"
void methCall(): {} {
    <Identifier> ("." <Identifier>)? "(" ( atom() ("," atom())* )? ")"
}

// block -> "{" (decl | stmnt)* "}"
void block(): {} {
    "{" (decl() | stmnt())* "}"
}

// stmnt -> ifStmnt | whileStmnt | returnStmnt | methCall | block | TODO
void stmnt(): {} {
    ifStmnt() | whileStmnt() | returnStmnt() | methCall() | block() ";"
}

// ifStmnt -> "if(" expr ")" stmnt ("else" stmnt)?
void ifStmnt(): {} {
    "if(" expr() ")" ( "else" stmnt() )?
}

// whileStmnt -> "while(" expr ")" stmnt
void whileStmnt(): {} {
    "while(" expr() ")" stmnt()
}

// returnStmnt -> "return" (expr | methCall)
void returnStmnt(): {} {
//    "return" ( expr() | methCall() ) ";"
    "return" fa() ";"
}

// bool -> atom | negation | ("(" bool ")") ((">" | "<" | BoolOp) bool)?
void bool(): {} {
    (atom() | negation() | ("(" bool() ")") )  ( LOOKAHEAD(2) (">" | "<" | <BoolOp>) bool() )?
}

// negation -> "!" bool
void negation(): {} {
    "!" bool()
}

// calc -> atom | ("(" calc ")") (("+" | "-" | "*" | "/" | "%") calc)?
void calc(): {} {
    ( atom() | ("(" calc() ")") )  ( ("+" | "-" | "*" | "/" | "%") calc() )?
}


// atom -> IntegerLiteral | DoubleLiteral | Idenftifier
//         | RegexLiteral | TODO
void atom(): {} {
    <IntegerLiteral> | <DoubleLiteral> | <BoolLiteral> | <StringLiteral> | <Identifier>
    | <RegexLiteral>
}
